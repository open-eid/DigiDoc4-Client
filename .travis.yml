language: c++
sudo: false
dist: bionic
osx_image: xcode11.6
services:
- docker
matrix:
  include:
  - os: osx
    env: TARGET=osx
    sudo: true
  - os: linux
    env: TARGET=ubuntu:20.04
env:
  global:
  - BUILD_NUMBER=${TRAVIS_BUILD_NUMBER}
  - AWS_DEFAULT_REGION=eu-west-1
before_install: 
- git submodule update --init --recursive && if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
    HASH=($(shasum prepare_osx_build_environment.sh));
    brew install openssl\@1.1 awscli;
    curl -s --location "https://github.com/open-eid/libdigidoc/releases/download/v3.10.3/libdigidoc_3.10.3.1214.pkg" -o libdigidoc.pkg;
    build=$(aws s3 ls s3://open-eid/libdigidocpp-nightly/ --no-sign-request |grep PRE|sed 's/.*PRE \(.*\)\/.*/\1/'|sort -n|tail -n1);
    aws s3 sync --exclude=* --include=*pkg s3://open-eid/libdigidocpp-nightly/${build} libdigidocpp-pkg --no-sign-request;
    aws s3 cp s3://open-eid/digidoc4-cache/opensc_0.20.0.2.pkg opensc.pkg --no-sign-request;
    aws s3 cp s3://open-eid/digidoc4-cache/${HASH}.zip ${HASH}.zip --no-sign-request;
    sudo installer -verboseR -pkg libdigidoc.pkg -target /;
    sudo installer -verboseR -pkg libdigidocpp-pkg/libdigidocpp*.pkg -target /;
    sudo installer -verboseR -pkg opensc.pkg -target /;
    unzip -qq -d /tmp ${HASH}.zip;
    rm -rf ${HASH}.zip opensc.pkg libdigidocpp.pkg libdigidoc.pkg;
    ln -s /usr/local/opt/openssl@1.1/lib/libcrypto.1.1.dylib /usr/local/lib/libcrypto.1.1.dylib;
    ln -s /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib /usr/local/lib/libssl.1.1.dylib;
  else
    sudo apt install awscli;
    build=$(aws s3 ls s3://open-eid/libdigidocpp-nightly/ --no-sign-request |grep PRE|sed 's/.*PRE \(.*\)\/.*/\1/'|sort -n|tail -n1);
    aws s3 sync --exclude=* --include=*deb s3://open-eid/libdigidocpp-nightly/${build} libdigidocpp-pkg --no-sign-request;
    find libdigidocpp-pkg -name "*i386*" -delete;
  fi
script: case ${TARGET} in
  *osx*)
    QT_DIR=$(ls -d /tmp/Qt-*-OpenSSL | tail -n 1);
    echo "Qt - ${QT_DIR}";
    mkdir build && cd build && cmake -DQt5_DIR=${QT_DIR}/lib/cmake/Qt5 -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl\@1.1 -DLDAP_ROOT=/tmp/OpenLDAP -DCMAKE_EXE_LINKER_FLAGS="-F/Library/Frameworks" ..;
    make zipdebug macdeployqt zip;
    cd .. && mkdir ../upload && cp build/qdigidoc4*.zip ../upload/;
    ;;
  *)
    docker run -e BUILD_NUMBER=${BUILD_NUMBER} -e COVERITY_SCAN_TOKEN=${COVERITY_SCAN_TOKEN} -e TRAVIS_BRANCH=${TRAVIS_BRANCH} -e IMAGE=${TARGET} -v ${HOME}:${HOME} -t "${TARGET}" /bin/bash -c "cd $(pwd);"'
      set -e;
      apt-get update -qq; 
      export DEBIAN_FRONTEND=noninteractive;
      apt-get install -y apt-transport-https dh-make devscripts cdbs pkg-config cmake libldap2-dev gettext libpcsclite-dev libminizip-dev libxml-security-c-dev libqt5svg5-dev qttools5-dev-tools qttools5-dev git curl wget ruby;
      dpkg -i libdigidocpp-pkg/*$(lsb_release -rs)*.deb;
      export VERSION=$(grep project CMakeLists.txt | egrep -o "([0-9]{1,}\.)+[0-9]{1,}");
      export VERSIONEX=${VERSION}.${BUILD_NUMBER}.$(lsb_release -rs);
      export DEBFULLNAME="Travis";
      export DEBEMAIL="travis-ci@travis";
      dh_make --createorig --addmissing --copyright lgpl2 --defaultless -y -p qdigidoc4_${VERSIONEX};
      dch --distribution $(lsb_release -cs) -v ${VERSIONEX} "Release ${VERSIONEX}.";
      dpkg-buildpackage -rfakeroot -us -uc;
      if [[ "${IMAGE}" = "ubuntu:20.04" && "${TRAVIS_BRANCH}" = "coverity_scan" ]]; then
        export COVERITY_SCAN_PROJECT_NAME="open-eid/DigiDoc4-Client";
        export COVERITY_SCAN_NOTIFICATION_EMAIL="eid-teenusehaldus@ria.ee";
        export COVERITY_SCAN_BRANCH_PATTERN=coverity_scan;
        export COVERITY_SCAN_BUILD_COMMAND_PREPEND="cmake .";
        export COVERITY_SCAN_BUILD_COMMAND=make;
        wget -O - https://scan.coverity.com/scripts/travisci_build_coverity_scan.sh | bash;
      fi;
      git clean -dxf;
      cd ..;
      mv DigiDoc4-Client qdigidoc4-${VERSION};
      tar czf qdigidoc4-${VERSION}.tar.gz --exclude-vcs qdigidoc4-${VERSION};
      mv qdigidoc4-${VERSION} DigiDoc4-Client;
      mkdir upload;
      cp qdigidoc4*.* upload';
  esac
deploy:
- provider: releases
  api_key: ${GITHUB_ACCESS_TOKEN}
  file: ../upload/qdigidoc4-${TRAVIS_TAG:1}.tar.gz
  skip_cleanup: true
  on:
    tags: true
    condition: $TARGET = "ubuntu:20.04"
    repo: open-eid/DigiDoc4-Client
- provider: s3
  access_key_id: $AWS_ACCESS_KEY_ID
  secret_access_key: $AWS_SECRET_ACCESS_KEY
  region: $AWS_DEFAULT_REGION
  bucket: open-eid
  skip_cleanup: true
  local_dir: ../upload/
  upload-dir: digidoc4-nightly/${BUILD_NUMBER}
  acl: public_read
  on:
    branch: master
    repo: open-eid/DigiDoc4-Client
