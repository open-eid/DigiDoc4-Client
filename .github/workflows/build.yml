name: CI
on: [push, pull_request]
env:
  BUILD_NUMBER: ${{ github.run_number }}
  MAKEFLAGS: -j3
jobs:
  macos:
    name: Build on macOS
    runs-on: macos-latest
    env:
      MACOSX_DEPLOYMENT_TARGET: '10.14'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Download artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: build.yml
        branch: master
        name: pkgs
        path: libdigidocpp-pkg
        repo: 'open-eid/libdigidocpp'
    - name: Install dependencies
      run: |
        HASH=($(shasum prepare_osx_build_environment.sh))
        curl -O -L -s https://installer.id.ee/media/github/opensc_0.20.0.2.pkg
        curl -O -L -s https://installer.id.ee/media/github/${HASH}.zip
        sudo installer -verboseR -pkg libdigidocpp-pkg/libdigidocpp*.pkg -target /
        sudo installer -verboseR -pkg opensc_*.pkg -target /
        sudo unzip -qq -d /Library/Developer ${HASH}.zip
    - name: Build
      run: |
        QT_DIR=$(ls -d /Library/Developer/Qt-*-OpenSSL | tail -n 1)
        cmake \
          -DQt5_DIR=${QT_DIR}/lib/cmake/Qt5 \
          -DOPENSSL_ROOT_DIR=/Library/Developer/OpenSSL \
          -DLDAP_ROOT=/Library/Developer/OpenLDAP \
          -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -B build -S .
        cmake --build build --target zipdebug macdeployqt zip
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: pkgs
        path: build/qdigidoc4*.zip
  ubuntu:
    name: Build on Ubuntu to ${{ matrix.container }}
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      matrix:
        container: ['ubuntu:20.04', 'ubuntu:21.10']
    env:
      DEBIAN_FRONTEND: noninteractive
      DEBFULLNAME: 'github-actions'
      DEBEMAIL: 'github-actions@github.com'
    steps:
    - name: Checkout
      uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Install dependencies
      run: apt update -qq && apt install --no-install-recommends -y lsb-release fakeroot build-essential devscripts cdbs pkg-config cmake libldap2-dev gettext libpcsclite-dev libssl-dev libqt5svg5-dev qttools5-dev-tools qttools5-dev lintian
    - name: Download artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: build.yml
        branch: master
        name: debs
        path: libdigidocpp-pkg
        repo: 'open-eid/libdigidocpp'
    - name: Install artifact
      run: |
        apt install --no-install-recommends -y ./libdigidocpp-pkg/*$(lsb_release -rs)*.deb
        rm -rf libdigidocpp-pkg
    - name: Setup changelog
      run: |
        export VERSION=$(grep project CMakeLists.txt | egrep -o "([0-9]{1,}\.)+[0-9]{1,}")
        export VERSIONEX=${VERSION}.${BUILD_NUMBER}.$(lsb_release -rs)
        dch --distribution $(lsb_release -cs) -v ${VERSIONEX} "Release ${VERSIONEX}."
    - name: Build packages
      run: |
        dpkg-buildpackage -us -uc
        mv ../qdigidoc4*.* .
    - name: Lintian
      run: lintian *.deb;
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: debs
        path: qdigidoc4*.*
  fedora:
    name: Build on Fedora to ${{ matrix.container }}
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      matrix:
        container: ['fedora:33']
    env:
      MAKEFLAGS: -j3
    steps:
    - name: Checkout
      uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Install Build Deps
      run: dnf groupinstall -y "Development Tools" "Development Libraries" fedora-packager
    - name: Install Deps
      run: dnf install -y cmake openssl-devel vim-common qt5-qtsvg-devel qt5-linguist
    - name: Download artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: build.yml
        branch: master
        name: rpms
        path: libdigidocpp-pkg
        repo: 'open-eid/libdigidocpp'
    - name: Install artifact
      run: dnf install -y ./libdigidocpp-pkg/*$(lsb_release -rs)*.rpm
    - name: Build
      run: |
        cmake -DCMAKE_INSTALL_PREFIX=/usr -B build -S .
        cmake --build build --target all package
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: rpms
        path: build/qdigidoc4*.rpm
  windows:
    name: Build on Windows
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        build: [VC17x86, VC17x64, VC19x86, VC19x64, VC22x86, VC22x64]
        include:
        - build: VC17x86
          arch: x86
          qt: win32_msvc2017
          image: windows-2019
          toolset: 14.16
          vcver: 141
        - build: VC17x64
          arch: x64
          qt: win64_msvc2017_64
          image: windows-2019
          toolset: 14.16
          vcver: 141
        - build: VC19x86
          arch: x86
          qt: win32_msvc2017
          image: windows-2019
          toolset: 14.29
          vcver: 142
        - build: VC19x64
          arch: x64
          qt: win64_msvc2017_64
          image: windows-2019
          toolset: 14.29
          vcver: 142
        - build: VC22x86
          arch: x86
          qt: win32_msvc2017
          image: windows-2022
          toolset: 14.30
          vcver: 143
        - build: VC22x64
          arch: x64
          qt: win64_msvc2017_64
          image: windows-2022
          toolset: 14.30
          vcver: 143
    env:
      VER_SUFFIX: .VS${{ matrix.vcver }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Download artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: build.yml
        branch: master
        name: msi
        path: ./
        repo: 'open-eid/libdigidocpp'
    - name: Install artifact
      run: |
        Rename-Item "libdigidocpp*VS${{ matrix.vcver }}.msi" libdigidocpp.msi
        msiexec /qn /a libdigidocpp.msi "TARGETDIR=$($pwd.Path)\\libs"
    - name: Prepare vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        vcpkgArguments: openssl
        vcpkgGitCommitId: a69b65229b3956b7f45abd81671b7330114bcaad
        vcpkgTriplet: ${{ matrix.arch }}-windows
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.12'
        arch: ${{ matrix.qt }}
    - name: Setup dev env
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}
        sdk: 10.0.17763.0
        toolset: ${{ matrix.toolset }}
    - name: Build
      run: |
        md build/client
        copy ${{ env.VCPKG_ROOT }}\installed\${{ matrix.arch }}-windows\bin\*.dll build\client\
        cmake "-GNinja" -DCMAKE_BUILD_TYPE=RelWithDebInfo `
          -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake `
          "-DLIBDIGIDOCPP_LIBRARY=libs/libdigidocpp/${{ matrix.arch }}/digidocpp.lib" `
          "-DLIBDIGIDOCPP_INCLUDE_DIR=libs/libdigidocpp/include" -B build -S .
        cmake --build build --target msi
        cmake --build build --target appx
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: msi
        path: |
          build/*.msi
          build/*.appx
  coverity:
    name: Run Coverity tests
    if: contains(github.repository, 'open-eid/DigiDoc4-Client') && contains(github.ref, 'coverity_scan')
    runs-on: ubuntu-20.04
    env:
      TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
      PROJECTNAME: 'open-eid/DigiDoc4-Client'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install dependencies
      run: sudo apt update -qq && sudo apt install --no-install-recommends -y cmake libldap2-dev gettext libpcsclite-dev libminizip-dev libxml-security-c-dev libqt5svg5-dev qttools5-dev-tools qttools5-dev
    - name: Download artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: build.yml
        branch: master
        name: debs
        path: libdigidocpp-pkg
        repo: 'open-eid/libdigidocpp'
    - name: Install artifact
      run: sudo dpkg -i libdigidocpp-pkg/*$(lsb_release -rs)*.deb
    - name: Download Coverity Build Tool
      run: |
        curl -s -d "token=$TOKEN&project=$PROJECTNAME" -o cov-analysis-linux64.tar.gz https://scan.coverity.com/download/cxx/linux64
        mkdir cov-analysis-linux64
        tar xzf cov-analysis-linux64.tar.gz --strip 1 -C cov-analysis-linux64
    - name: Build
      run: |
        cmake .
        export PATH=$PWD/cov-analysis-linux64/bin:$PATH
        cov-build --dir cov-int make
    - name: Submit the result to Coverity Scan
      run: |
        tar czvf upload.tgz cov-int
        curl -s \
          -F project=$PROJECTNAME \
          -F token=$TOKEN \
          -F email=eid-teenusehaldus@ria.ee \
          -F file=@upload.tgz \
          -F version=master \
          -F description="Github Actions CI build" \
          https://scan.coverity.com/builds?project=$PROJECTNAME
  codeql:
    name: Run CodeQL tests
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install dependencies
      run: sudo apt update -qq && sudo apt install --no-install-recommends -y cmake libldap2-dev gettext libpcsclite-dev libminizip-dev libxml-security-c-dev libqt5svg5-dev qttools5-dev-tools qttools5-dev
    - name: Download artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: build.yml
        branch: master
        name: debs
        path: libdigidocpp-pkg
        repo: 'open-eid/libdigidocpp'
    - name: Install artifact
      run: sudo dpkg -i libdigidocpp-pkg/*$(lsb_release -rs)*.deb
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: cpp
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
